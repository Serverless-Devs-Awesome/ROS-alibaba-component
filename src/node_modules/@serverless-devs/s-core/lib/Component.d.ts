import Context from './Context';
interface ComponentContext {
    instance: Context;
    log?: (msg: string) => void;
    status?: (msg: string) => void;
    output?: (msg: string) => void;
    sleep?: (msg: string) => void;
    args2Json?: (msg: string) => void;
}
export default class Component {
    protected id: string;
    protected context: ComponentContext;
    protected state: {};
    name: string;
    constructor(id?: string, context?: Context);
    init(): Promise<void>;
    save(): Promise<void>;
    sleep(ms: any): Promise<unknown>;
    private getNewKey;
    args(args: any, boolList?: [], moreList?: [], argsList?: []): {
        Commands: any;
        Parameters: any;
    };
    help(inputs: any, message: any): void;
    zip(packToParame: any): Promise<any>;
    load(componentName: any, componentAlias?: string, provider?: string): Promise<any>;
}
export {};
//# sourceMappingURL=Component.d.ts.map