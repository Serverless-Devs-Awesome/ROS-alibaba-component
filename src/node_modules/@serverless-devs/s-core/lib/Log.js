"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var colors = require('colors');
var os = require('os');
var yaml = require('js-yaml');
var path = require('path');
var fs = require('fs');
var Component = /** @class */ (function () {
    function Component() {
    }
    Component.prototype.getSpace = function (num) {
        var tempSpace = ' ';
        var tempResult = '';
        for (var i = 0; i < (num > 0 ? parseInt(String(num)) : 0); i++) {
            tempResult = tempResult + tempSpace;
        }
        return tempResult;
    };
    Component.prototype.getLogMessage = function (message, type, style, num) {
        return this.getSpace(num || 0) + (style === 1 ? type : '') + message;
    };
    Component.prototype.isColor = function () {
        var profPath = path.join(os.homedir(), ".s/set-config.yml");
        try {
            var profile = yaml.safeLoad(fs.readFileSync(profPath, 'utf8')) || {};
            return profile['output-color'];
        }
        catch (err) {
            return true;
        }
    };
    Component.prototype.log = function (message, option) {
        var _a = option || {}, style = _a.style, num = _a.num, output = _a.output;
        message = this.getLogMessage(message, '[LOG] ', style || 0, num || 0);
        if (process.env['verbose'] === 'true' || output === true) {
            console.log(this.isColor() ? colors.grey(message) : message);
        }
    };
    Component.prototype.warn = function (message, option) {
        var _a = option || {}, style = _a.style, num = _a.num;
        message = this.getLogMessage(message, '[WARN] ', style || 0, num || 0);
        console.log(this.isColor() ? colors.yellow(message) : message);
    };
    Component.prototype.error = function (message, option) {
        var _a = option || {}, style = _a.style, num = _a.num;
        message = this.getLogMessage(message, '[ERROR] ', style || 0, num || 0);
        // throw new Error(message);
        console.log(this.isColor() ? colors.red(message) : message);
    };
    Component.prototype.info = function (message, option) {
        var _a = option || {}, style = _a.style, num = _a.num;
        message = this.getLogMessage(message, '[INFO] ', style || 0, num || 0);
        console.log(this.isColor() ? colors.cyan(message) : message);
    };
    Component.prototype.success = function (message, option) {
        var _a = option || {}, style = _a.style, num = _a.num;
        message = this.getLogMessage(message, '[LOG] ', style || 0, num || 0);
        console.log(this.isColor() ? colors.green(message) : message);
    };
    return Component;
}());
exports.default = Component;
//# sourceMappingURL=Log.js.map