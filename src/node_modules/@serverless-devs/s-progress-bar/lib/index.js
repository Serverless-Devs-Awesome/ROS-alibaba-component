"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressService = exports.ProgressType = void 0;
var ProgressBar = require("progress");
var _a = require('colors'), green = _a.green, white = _a.white;
var ProgressType;
(function (ProgressType) {
    ProgressType[ProgressType["Bar"] = 0] = "Bar";
    ProgressType[ProgressType["Loading"] = 1] = "Loading";
})(ProgressType = exports.ProgressType || (exports.ProgressType = {}));
var DEFAULT_BAR_FORMAT = "downloading " + green(':loading') + " ((:bar)) :current/:total(Bytes) :percent :etas";
var DEFAULT_LOADING_FORMAT = green(':loading') + " ((:bar))";
var ProgressService = /** @class */ (function () {
    /**
     * @param type, Bar: a progress bar with total size known, Loading: a loading style with unknown total size
     * @param format, format of progress bar
     * @param options, options of progress bar, with type Loading, just set {width:50, total:100}
     */
    function ProgressService(type, options, format) {
        this.type = type;
        this.options = options;
        var opts = ProgressService.initProgressBarOptions(type, options);
        var fmt = ProgressService.initFormat(type, format);
        this.progressType = type;
        // init backward for loading type
        this.backward = false;
        var pb = new ProgressBar(fmt, opts);
        var loadingChars = ['⣴', '⣆', '⢻', '⢪', '⢫'];
        // set tick callback with loading chars
        var oldTick = pb.tick;
        // @ts-ignore
        pb.tick = function (len, tokens) {
            var newTokens = Object.assign({
                loading: loadingChars[parseInt(String(Math.random() * 5))]
            }, tokens);
            // console.log(newTokens);
            oldTick.call(pb, len, newTokens);
        };
        this.bar = pb;
    }
    ProgressService.initFormat = function (type, format) {
        if (!format) {
            if (type === ProgressType.Bar) {
                format = DEFAULT_BAR_FORMAT;
            }
            else if (type === ProgressType.Loading) {
                format = DEFAULT_LOADING_FORMAT;
            }
        }
        return format;
    };
    ProgressService.initProgressBarOptions = function (type, options) {
        if (!options.width) {
            options.width = 30;
        }
        if (!options.complete) {
            if (type === ProgressType.Loading) {
                options.complete = green('█');
            }
            else {
                options.complete = green('█');
            }
        }
        if (!options.incomplete) {
            if (type === ProgressType.Loading) {
                options.incomplete = '░';
            }
            else {
                options.incomplete = white('░');
            }
        }
        if (!options.clear) {
            options.clear = true;
        }
        return options;
    };
    /**
     * update progress status
     * @param currentTransferred, when progress type is bar, increase progress ticks with
     */
    ProgressService.prototype.update = function (currentTransferred) {
        if (this.progressType === ProgressType.Bar) {
            if (!currentTransferred) {
                // warning, update bar with empty transferred tick.
                return;
            }
            this.updateBarType(currentTransferred);
        }
        else if (this.progressType === ProgressType.Loading) {
            this.updateLoadingType();
        }
    };
    ProgressService.prototype.updateBarType = function (currentTransferred) {
        var increment = currentTransferred - this.bar.curr;
        this.bar.tick(increment);
    };
    ProgressService.prototype.updateLoadingType = function () {
        if (!this.backward && this.bar.curr === this.bar.total) {
            this.backward = true;
        }
        else if (this.backward && this.bar.curr === 0) {
            this.backward = false;
        }
        if (this.backward) {
            this.bar.tick(0);
        }
        else {
            this.bar.tick(0);
        }
    };
    ProgressService.prototype.terminate = function () {
        this.bar.terminate();
    };
    ProgressService.prototype.complete = function () {
        return this.bar.complete;
    };
    ProgressService.prototype.curr = function () {
        return this.bar.curr;
    };
    ProgressService.prototype.total = function () {
        return this.bar.total;
    };
    /**
     * "interrupt" the progress bar and write a message above it.
     */
    ProgressService.prototype.interrupt = function (message) {
        this.bar.interrupt(message);
    };
    return ProgressService;
}());
exports.ProgressService = ProgressService;
